{"code":"!function(n){var r={};function e(t){if(r[t])return r[t].exports;var a=r[t]={i:t,l:!1,exports:{}};return n[t].call(a.exports,a,a.exports,e),a.l=!0,a.exports}e.m=n,e.c=r,e.d=function(n,r,t){e.o(n,r)||Object.defineProperty(n,r,{enumerable:!0,get:t})},e.r=function(n){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(n,\"__esModule\",{value:!0})},e.t=function(n,r){if(1&r&&(n=e(n)),8&r)return n;if(4&r&&\"object\"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(e.r(t),Object.defineProperty(t,\"default\",{enumerable:!0,value:n}),2&r&&\"string\"!=typeof n)for(var a in n)e.d(t,a,function(r){return n[r]}.bind(null,a));return t},e.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return e.d(r,\"a\",r),r},e.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},e.p=\"\",e(e.s=0)}([\n/*!**********************!*\\\n  !*** ./src/index.js ***!\n  \\**********************/\n/*! no static exports found */\n/*! all exports used */\n/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(module,exports,__webpack_require__){eval(\"__webpack_require__(/*! ./globalEventEmitter */ 1)\\r\\n__webpack_require__(/*! ./PersonalityTester */ 2)\\r\\n__webpack_require__(/*! ./polyfill */ 3)\\r\\n__webpack_require__(/*! ./util */ 4)\\n\\n//# sourceURL=webpack:///./src/index.js?\")},\n/*!***********************************!*\\\n  !*** ./src/globalEventEmitter.js ***!\n  \\***********************************/\n/*! no static exports found */\n/*! all exports used */\n/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(module,exports){eval(\"\\r\\nwindow.Bus = function () {\\r\\n    var EventEmitter = function () {\\r\\n        this.__z_e_listeners = {};\\r\\n    };\\r\\n    EventEmitter.prototype.on = function (evt, handler, context) {\\r\\n        var handlers = this.__z_e_listeners[evt];\\r\\n        if (handlers === undefined) {\\r\\n            handlers = [];\\r\\n            this.__z_e_listeners[evt] = handlers;\\r\\n        }\\r\\n        var item = {\\r\\n            handler: handler,\\r\\n            context: context\\r\\n        };\\r\\n        handlers.push(item);\\r\\n        return item;\\r\\n    };\\r\\n    EventEmitter.prototype.off = function (evt, handler, context) {\\r\\n        var handlers = this.__z_e_listeners[evt];\\r\\n        if (handlers !== undefined) {\\r\\n            var size = handlers.length;\\r\\n            for (var i = 0; i < size; i++) {\\r\\n                var item = handlers[i];\\r\\n                if (item.handler === handler && item.context === context) {\\r\\n                    handlers.splice(i, 1);\\r\\n                    return;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    };\\r\\n    EventEmitter.prototype.emit = function (type, event) {\\r\\n        var hanlders = this.__z_e_listeners[type];\\r\\n        if (hanlders !== undefined) {\\r\\n            var size = hanlders.length;\\r\\n            for (var i = 0; i < size; i++) {\\r\\n                var ef = hanlders[i];\\r\\n                var handler = ef.handler;\\r\\n                var context = ef.context;\\r\\n                handler.apply(context, [event]);\\r\\n            }\\r\\n        }\\r\\n    };\\r\\n\\r\\n    return new EventEmitter()\\r\\n}()\\r\\n\\n\\n//# sourceURL=webpack:///./src/globalEventEmitter.js?\")},\n/*!**********************************!*\\\n  !*** ./src/PersonalityTester.js ***!\n  \\**********************************/\n/*! no static exports found */\n/*! all exports used */\n/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(module,exports){eval(\"window.PersonalityTester = function () {\\r\\n\\r\\n    let getImageUrl = name => `personalities/${name}.png`\\r\\n    let getNameImageUrl = name => `personality_names/${name}.png`\\r\\n\\r\\n    let userInfo = {\\r\\n        name: '',\\r\\n        sex: ''\\r\\n    }\\r\\n\\r\\n    const personalityTypes = [\\r\\n        // 0\\r\\n        {\\r\\n            name: '山大橘猫型人格',\\r\\n            url: getImageUrl('shandajumao'),\\r\\n            nameUrl: getNameImageUrl('shandajumao'),\\r\\n        },\\r\\n        // 1\\r\\n        {\\r\\n            name: '山大白猫型人格',\\r\\n            url: getImageUrl('baimao'),\\r\\n            nameUrl: getNameImageUrl('baimao'),\\r\\n        },\\r\\n        // 2\\r\\n        {\\r\\n            name: '知新楼型人格',\\r\\n            url: getImageUrl('zhixinlou'),\\r\\n            nameUrl: getNameImageUrl('zhixinlou'),\\r\\n        },\\r\\n        // 3\\r\\n        {\\r\\n            name: '小树林型人格',\\r\\n            url: getImageUrl('xiaoshulin'),\\r\\n            nameUrl: getNameImageUrl('xiaoshulin'),\\r\\n        },\\r\\n        // 4\\r\\n        {\\r\\n            name: '情人坡型人格',\\r\\n            url: getImageUrl('qingrenpo'),\\r\\n            nameUrl: getNameImageUrl('qingrenpo'),\\r\\n        },\\r\\n        // 5\\r\\n        {\\r\\n            name: '青岛风型人格',\\r\\n            url: getImageUrl('qingdaofeng'),\\r\\n            nameUrl: getNameImageUrl('qingdaofeng'),\\r\\n        },\\r\\n        // 6\\r\\n        {\\r\\n            name: '文心湖型人格',\\r\\n            url: getImageUrl('wenxinhu'),\\r\\n            nameUrl: getNameImageUrl('wenxinhu'),\\r\\n        },\\r\\n        // 7\\r\\n        {\\r\\n            name: '鸡蛋饼型人格',\\r\\n            url: getImageUrl('jidanbing'),\\r\\n            nameUrl: getNameImageUrl('jidanbing'),\\r\\n        },\\r\\n        // 8\\r\\n        {\\r\\n            name: '号院型人格',\\r\\n            url: getImageUrl('haoyuan'),\\r\\n            nameUrl: getNameImageUrl('haoyuan'),\\r\\n        },\\r\\n        // 9\\r\\n        {\\r\\n            name: '风雨操场型人格',\\r\\n            url: getImageUrl('fengyucaochang'),\\r\\n            nameUrl: getNameImageUrl('fengyucaochang'),\\r\\n        },\\r\\n        // 10\\r\\n        {\\r\\n            name: '麻辣香锅人格',\\r\\n            url: getImageUrl('malaxiangguo'),\\r\\n            nameUrl: getNameImageUrl('malaxiangguo'),\\r\\n        },\\r\\n        // 11\\r\\n        {\\r\\n            name: '校友门型人格',\\r\\n            url: getImageUrl('xiaoyoumen'),\\r\\n            nameUrl: getNameImageUrl('xiaoyoumen'),\\r\\n        },\\r\\n        // 12\\r\\n        {\\r\\n            name: '海棠花型人格',\\r\\n            url: getImageUrl('haitanghua'),\\r\\n            nameUrl: getNameImageUrl('haitanghua'),\\r\\n        },\\r\\n    ]\\r\\n\\r\\n\\r\\n    let answerList = []\\r\\n\\r\\n    const optionTypes = {\\r\\n        A: Symbol('A'),\\r\\n        B: Symbol('B'),\\r\\n        C: Symbol('C'),\\r\\n        D: Symbol('D'),\\r\\n    }\\r\\n\\r\\n    // 二值随机数true/false\\r\\n    const binRandom = () => Math.random() >= .5 ? true : false\\r\\n    // 三值随机数0/1/-1\\r\\n    const triRandom = () => {\\r\\n        let r = Math.random()\\r\\n        return r >= 2 / 3 ? 1 : r >= 1 / 3 ? 0 : -1\\r\\n    }\\r\\n    \\r\\n    // 记录最后测试结果\\r\\n    let res = null\\r\\n\\r\\n    return {\\r\\n\\r\\n        /**\\r\\n         * 表单验证通过返回true 否则返回false\\r\\n         * @return {boolean}\\r\\n         */\\r\\n        updateUserInfo: (name, sex) => {\\r\\n            userInfo.name = name\\r\\n            userInfo.sex = sex\\r\\n        },\\r\\n        updateAnswer(questionIndex, option) {\\r\\n            answerList[questionIndex] = option\\r\\n        },\\r\\n        getTestingResult() {\\r\\n            if (res) {\\r\\n                return res\\r\\n            }\\r\\n            if (answerList[5] === optionTypes.A) {\\r\\n                // 橘猫或文心湖 风雨操场\\r\\n                let r = triRandom()\\r\\n                res = personalityTypes[r > 0 ? 0 : r < 0 ? 6 : 9]\\r\\n            } else if (answerList[4] === optionTypes.A) {\\r\\n                // 号院或者白猫 校友门\\r\\n                let r = triRandom()\\r\\n                res = personalityTypes[r > 0 ? 1 : r < 0 ? 8 : 11]\\r\\n            } else if (answerList[5] === optionTypes.D) {\\r\\n                // 小树林、情人坡、海棠花、麻辣香锅\\r\\n                res = personalityTypes[binRandom() ? (binRandom() ? 3 : 4) : (binRandom() ? 10 : 12)]\\r\\n            } else {\\r\\n                // 知新楼、鸡蛋饼、风的界面\\r\\n                let r = triRandom()\\r\\n                res = personalityTypes[r > 0 ? 2 : r < 0 ? 5 : 7]\\r\\n            }\\r\\n            return res\\r\\n        },\\r\\n        showResult() {\\r\\n            let res = this.getTestingResult()\\r\\n            let node = document.createElement('div')\\r\\n            document.body.appendChild(node)\\r\\n            node.outerHTML = `\\r\\n            <div class=\\\"testing-result\\\" id=\\\"testing-result\\\">\\r\\n    <img src=\\\"private_images/cele.png\\\" class=\\\"cele\\\">\\r\\n    <img src=\\\"private_images/dangdangdang.png\\\" class=\\\"dangdangdang\\\">\\r\\n    <img class=\\\"personality\\\" src=\\\"${res.nameUrl}\\\">\\r\\n    <button class=\\\"enter-button\\\" id=\\\"enter-button\\\">点击查看你的人格报告</button>\\r\\n    <style>\\r\\n        .testing-result{\\r\\n            position: fixed;\\r\\n            left: 0;\\r\\n            top: 0;\\r\\n            width: 100%;\\r\\n            height: 100%;\\r\\n            background-color: #bbdadc;\\r\\n            color: #0a2d2f;\\r\\n        }\\r\\n        .testing-result .cele{\\r\\n            width: 50%;\\r\\n            position: absolute;\\r\\n            left: 0;\\r\\n        }\\r\\n        .testing-result .dangdangdang{\\r\\n            width: 70%;\\r\\n            position: absolute;\\r\\n            left: 15%;\\r\\n            top: 20%;\\r\\n            animation: dangdangdang ease-in-out 200ms infinite alternate ;\\r\\n            transform-origin: 30% 70%;\\r\\n        }\\r\\n        @keyframes dangdangdang {\\r\\n            0%{\\r\\n                transform: rotateZ(0);\\r\\n            }\\r\\n            100%{\\r\\n                transform: rotateZ(5deg);\\r\\n            }\\r\\n        }\\r\\n        .testing-result .personality{\\r\\n            position: absolute;\\r\\n            box-sizing: border-box;\\r\\n            width: 83%;\\r\\n            left: 10%;\\r\\n            top: 50%;\\r\\n        }\\r\\n        .testing-result .enter-button{\\r\\n            position: absolute;\\r\\n            bottom: 1em;\\r\\n            right: 1em;\\r\\n            border: none;\\r\\n            background-color: transparent;\\r\\n            color: inherit;\\r\\n            font-size: 1.2em;\\r\\n        }\\r\\n\\r\\n        .testing-result .enter-button:focus{\\r\\n            outline: none;\\r\\n        }\\r\\n    </style>\\r\\n</div>\\r\\n`\\r\\n\\r\\n            let enterButton = document.getElementById('enter-button')\\r\\n            let outerBox = document.getElementById('testing-result')\\r\\n            enterButton.addEventListener('click', function () {\\r\\n                outerBox.parentNode.removeChild(outerBox)\\r\\n                PersonalityTester.showPersonalPoster()\\r\\n            })\\r\\n\\r\\n\\r\\n        },\\r\\n        showPersonalPoster() {\\r\\n            let res = this.getTestingResult()\\r\\n            let canvas = document.createElement('canvas'),\\r\\n                cc = canvas.getContext('2d')\\r\\n            canvas.width = 640\\r\\n            canvas.height = 1136\\r\\n\\r\\n            let image = new Image()\\r\\n            image.src = res.url\\r\\n            image.onload = () => {\\r\\n\\r\\n                cc.drawImage(image, 0, 0)\\r\\n\\r\\n                cc.fillStyle = '#fff'\\r\\n                cc.font = \\\"bolder 25px NSimSun\\\"\\r\\n                cc.textAlign = 'right'\\r\\n                cc.fillText(userInfo.name, 240, 57);\\r\\n                let posterUrl = canvas.toDataURL('image/jpeg')\\r\\n\\r\\n                let content = `\\r\\n    <style>\\r\\n        /*专属海报css*/\\r\\n\\r\\n        .personal-poster{\\r\\n            position: fixed;\\r\\n            left: 0;\\r\\n            top: 0;\\r\\n            width: 100%;\\r\\n            height: 100%;\\r\\n            text-align: center;\\r\\n            color: white;\\r\\n            background-image: url(\\\"${getImageUrl('poster_bg')}\\\");\\r\\n            background-size: cover;\\r\\n        }\\r\\n        .personal-poster__img{\\r\\n            margin-top: 1em;\\r\\n            width: 73%;\\r\\n            height: 78%;\\r\\n            object-fit: contain;\\r\\n            animation: poster-transition 2s;\\r\\n        }\\r\\n        .restart-button{\\r\\n            font-size: 1.5em;\\r\\n            height: 2em;\\r\\n            color: white;\\r\\n            background-color: transparent;\\r\\n            border: 1px solid white;\\r\\n            border-radius: 1em;\\r\\n            padding: 0 2em;\\r\\n        }\\r\\n        .restart-button:hover{\\r\\n            cursor: pointer;\\r\\n        }\\r\\n        .restart-button:focus{\\r\\n            outline: none;\\r\\n        }\\r\\n        \\r\\n        @keyframes poster-transition {\\r\\n            from {\\r\\n                transform: scale(2.5);\\r\\n            }\\r\\n            to{\\r\\n                transform: scale(1);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n    </style>\\r\\n    <div class=\\\"personal-poster\\\">\\r\\n        <img src=\\\"${posterUrl}\\\" class=\\\"personal-poster__img\\\">\\r\\n        <p class=\\\"personal-poster__hint\\\">长按保存图片</p>\\r\\n        <button class=\\\"restart-button\\\" onclick=\\\"location.reload()\\\">再测一次</button>\\r\\n    </div>`\\r\\n                let node = document.createElement('div')\\r\\n                document.body.appendChild(node)\\r\\n                node.outerHTML = content\\r\\n\\r\\n            }\\r\\n\\r\\n\\r\\n        },\\r\\n\\r\\n        optionTypes\\r\\n    }\\r\\n\\r\\n}()\\n\\n//# sourceURL=webpack:///./src/PersonalityTester.js?\")},\n/*!*************************!*\\\n  !*** ./src/polyfill.js ***!\n  \\*************************/\n/*! no static exports found */\n/*! all exports used */\n/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(module,exports){eval(\"\\r\\n// 将字符串分割为单词\\r\\n// 英文字母为单词\\r\\n// 中文单个字为单词\\r\\nfunction chineseMixedSplit(s) {\\r\\n    let sArray = s.split(/(\\\\s)/)\\r\\n    let newSArray = []\\r\\n    sArray.forEach(c => {\\r\\n        let curC = ''\\r\\n        for (let sc of c) {\\r\\n            curC += sc\\r\\n            if (sc >= '\\\\u{4E00}' && sc <= '\\\\u{9FA5}') {\\r\\n                // 中文\\r\\n                newSArray.push(curC)\\r\\n                curC = ''\\r\\n            }\\r\\n        }\\r\\n        if (curC.length > 0) newSArray.push(curC)\\r\\n    })\\r\\n    return newSArray\\r\\n}\\r\\n\\r\\n\\r\\n// 重写createjs 的drawText方法\\r\\ncreatejs.Text.prototype._drawText = function (ctx, o, lines) {\\r\\n    var paint = !!ctx;\\r\\n    if (!paint) {\\r\\n        ctx = Text._workingContext;\\r\\n        ctx.save();\\r\\n        this._prepContext(ctx);\\r\\n    }\\r\\n    var lineHeight = this.lineHeight || this.getMeasuredLineHeight();\\r\\n\\r\\n    var maxW = 0, count = 0;\\r\\n    var hardLines = String(this.text).split(/(?:\\\\r\\\\n|\\\\r|\\\\n)/);\\r\\n    for (var i = 0, l = hardLines.length; i < l; i++) {\\r\\n        var str = hardLines[i];\\r\\n        var w = null;\\r\\n\\r\\n        if (this.lineWidth != null && (w = ctx.measureText(str).width) > this.lineWidth) {\\r\\n            // text wrapping:\\r\\n            var words = chineseMixedSplit(str);\\r\\n            str = words[0];\\r\\n            w = ctx.measureText(str).width;\\r\\n\\r\\n            for (var j = 1, jl = words.length; j < jl; j ++) {\\r\\n                // Line needs to wrap:\\r\\n                var wordW = ctx.measureText(words[j]).width;\\r\\n                if (w + wordW > this.lineWidth) {\\r\\n                    if (paint) {\\r\\n                        this._drawTextLine(ctx, str, count * lineHeight);\\r\\n                    }\\r\\n                    if (lines) {\\r\\n                        lines.push(str);\\r\\n                    }\\r\\n                    if (w > maxW) {\\r\\n                        maxW = w;\\r\\n                    }\\r\\n                    console.log(str)\\r\\n                    str = words[j];\\r\\n                    w = ctx.measureText(str).width;\\r\\n                    count++;\\r\\n                } else {\\r\\n                    str += words[j];\\r\\n                    w += wordW;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (paint) {\\r\\n            this._drawTextLine(ctx, str, count * lineHeight);\\r\\n        }\\r\\n        if (lines) {\\r\\n            lines.push(str);\\r\\n        }\\r\\n        if (o && w == null) {\\r\\n            w = ctx.measureText(str).width;\\r\\n        }\\r\\n        if (w > maxW) {\\r\\n            maxW = w;\\r\\n        }\\r\\n        count++;\\r\\n    }\\r\\n\\r\\n    if (o) {\\r\\n        o.width = maxW;\\r\\n        o.height = count * lineHeight;\\r\\n    }\\r\\n    if (!paint) {\\r\\n        ctx.restore();\\r\\n    }\\r\\n    return o;\\r\\n};\\r\\n \\n\\n//# sourceURL=webpack:///./src/polyfill.js?\")},\n/*!*********************!*\\\n  !*** ./src/util.js ***!\n  \\*********************/\n/*! no static exports found */\n/*! all exports used */\n/*! ModuleConcatenation bailout: Module is not an ECMAScript module */function(module,exports){eval(\"\\r\\n\\r\\n\\r\\nfunction waitClickingScreen() {\\r\\n    this.stop()\\r\\n    let clickFunc = ()=>{\\r\\n        this.play()\\r\\n        window.document.body.removeEventListener('click',clickFunc)\\r\\n    }\\r\\n    window.document.body.addEventListener('click',clickFunc)\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * 在此帧停止并等待回答后继续\\r\\n * 请绑定this到adobe animate scopes\\r\\n * @param questionIndex要回答的问题序号\\r\\n * @param adobeSymbolInfo adobe元件的信息，要为他们绑定监听器\\r\\n *          name : String,\\r\\n *          representedAnswer : enum PersonalityTester.optionTypes\\r\\n */\\r\\nfunction waitAnswer(questionIndex, adobeSymbolsInfo = [\\r\\n    {\\r\\n        name: `option${questionIndex}A`,\\r\\n        representedAnswer: PersonalityTester.optionTypes.A\\r\\n    },\\r\\n    {\\r\\n        name: `option${questionIndex}B`,\\r\\n        representedAnswer: PersonalityTester.optionTypes.B\\r\\n    },\\r\\n    {\\r\\n        name: `option${questionIndex}C`,\\r\\n        representedAnswer: PersonalityTester.optionTypes.C\\r\\n    },\\r\\n    {\\r\\n        name: `option${questionIndex}D`,\\r\\n        representedAnswer: PersonalityTester.optionTypes.D\\r\\n    },\\r\\n]) {\\r\\n\\r\\n    this.stop();\\r\\n    adobeSymbolsInfo.forEach(symbol => {\\r\\n        \\r\\n        this[symbol.name].addEventListener(\\\"click\\\", mouseClickHandler.bind(this));\\r\\n\\r\\n        function mouseClickHandler() {\\r\\n            PersonalityTester.updateAnswer(questionIndex, symbol.representedAnswer)\\r\\n            this.play();\\r\\n        }\\r\\n\\r\\n    })\\r\\n}\\r\\n\\r\\nwindow.waitAnswer = waitAnswer\\r\\nwindow.waitClickingScreen = waitClickingScreen\\n\\n//# sourceURL=webpack:///./src/util.js?\")}]);","extractedComments":[]}